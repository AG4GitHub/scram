#################
SCRAM Description
#################

SCRAM is a command-line tool that performs probabilistic risk assessment
using fault trees.
The documentation may be ahead of software development and describe
features that will be introduced in future versions.

Command-line Call of SCRAM by a User
====================================

The user supplies input files and analysis configurations via command-line.
Various types of analyses can be performed on the input files, for example,
fault tree, even tree, Markov chain, etc. The user
must specify what kind of analysis with what parameters must be performed.
For example, if FTA is requested, the user can choose if probability
calculations should assume the rare event or MCUB approximation.
However, there are default values for these parameters that try to
give the most optimal and accurate results, so that only input files should
be enough for initial runs.

Fault Tree Analysis
===================
#. Output the user specified analysis results. The output is sorted by
   the order of minimal cut sets, their probabilities. In addition,
   the contribution of each primary event is given in the output.

#. Validate XML input files against RelaxNG.
#. Validate the input analysis specifications and instantiations.
#. Output a graphing dot file. *No probability definition required*
#. Instantiate the analysis. Create the trees for the analysis.
#. Find minimal cut sets. *No probability definition required*

   - May specify maximum order for cut sets for faster calculations.

#. Find the total probability of the top event and importance values for
   basic events.

   - May specify cut-off probability for cut sets.
   - May specify the limit on the number of sums in the probability equation.
   - May specify the rare event approximation or MCUB for faster calculations.
   - May specify mission time that is used to calculate probabilities.

Uncertainty Analysis
====================

#. Get configurations from command-line for number of trials and mission time.
#. Accept minimal cut sets generated by fault tree analysis.
#. Generate the probability equation for the top event or gate.
#. Sample basic events and calculate total probability.
#. Perform statistical analysis of the sampled values.
#. Output the statistical results, such as mean, standard deviation, and range.

Event Tree Analysis *Not implemented*
=====================================
#. Read input files. Verification of the input. Optional visual tool.
#. (*Optional*) Upon users' request output instruction file for **graphviz**
   dot to draw the tree. This is for visual verification of the input.
   Stop execution of the program.
#. Create the tree for analysis.
#. Perform calculations.
#. Output the results.


Future Additions
================
#. Common-cause analysis.
#. Importance analysis.
#. Event tree analysis.
#. Dynamic fault tree analysis.
#. Markov analysis.


General Information for Users
=============================
#. Run 'scram -h' to see all the flags and parameters for analysis.

#. The minimum cut set generation for a fault tree and probability calculations
   may use a lot of time and computing power depending on the complexity of
   the tree. You can adjust SCRAM flags and parameters to reduce these demands.

#. All analysis can be run with logging of steps. The logging outputs useful
   information for figuring out limiting bottlenecks and the source of errors
   in analysis. This information can be used for debugging and tests.
