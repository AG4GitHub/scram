<?xml version="1.0" encoding="UTF-8"?>
<!-- I. Report/Calculation Layer -->
<!-- I.1. Models -->
<grammar xmlns="http://relaxng.org/ns/structure/1.0">
  <define name="opsa-mef">
    <element name="opsa-mef">
      <ref name="attlist.opsa-mef"/>
      <optional>
        <ref name="label"/>
      </optional>
      <optional>
        <ref name="attributes"/>
      </optional>
      <zeroOrMore>
        <choice>
          <ref name="define-event-tree"/>
          <ref name="define-alignment"/>
          <ref name="define-consequence-group"/>
          <ref name="define-consequence"/>
          <ref name="define-rule"/>
          <ref name="define-initiating-event-group"/>
          <ref name="define-initiating-event"/>
          <ref name="define-fault-tree"/>
          <ref name="define-substitution"/>
          <ref name="define-CCF-group"/>
          <ref name="include"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.opsa-mef" combine="interleave">
    <empty/>
  </define>
  <define name="label">
    <element name="label">
      <ref name="attlist.label"/>
      <text/>
    </element>
  </define>
  <define name="attlist.label" combine="interleave">
    <empty/>
  </define>
  <define name="attributes">
    <element name="attributes">
      <ref name="attlist.attributes"/>
      <zeroOrMore>
        <ref name="attribute"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.attributes" combine="interleave">
    <empty/>
  </define>
  <define name="attribute">
    <element name="attribute">
      <ref name="attlist.attribute"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.attribute" combine="interleave">
    <attribute name="name"/>
    <attribute name="value"/>
    <optional>
      <attribute name="type"/>
    </optional>
  </define>
  <define name="include">
    <element name="include">
      <ref name="attlist.include"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.include" combine="interleave">
    <attribute name="file"/>
  </define>
  <!-- I.2. Consequences, Consequence Groups -->
  <define name="define-consequence">
    <element name="define-consequence">
      <ref name="attlist.define-consequence"/>
      <optional>
        <ref name="label"/>
      </optional>
      <optional>
        <ref name="attributes"/>
      </optional>
      <ref name="initiating-event"/>
      <ref name="sequence"/>
    </element>
  </define>
  <define name="attlist.define-consequence" combine="interleave">
    <attribute name="name"/>
  </define>
  <define name="define-consequence-group">
    <element name="define-consequence-group">
      <ref name="attlist.define-consequence-group"/>
      <optional>
        <ref name="label"/>
      </optional>
      <optional>
        <ref name="attributes"/>
      </optional>
      <zeroOrMore>
        <choice>
          <ref name="consequence"/>
          <ref name="consequence-group"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.define-consequence-group" combine="interleave">
    <attribute name="name"/>
  </define>
  <define name="consequence">
    <element name="consequence">
      <ref name="attlist.consequence"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.consequence" combine="interleave">
    <attribute name="name"/>
  </define>
  <define name="consequence-group">
    <element name="consequence-group">
      <ref name="attlist.consequence-group"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.consequence-group" combine="interleave">
    <attribute name="name"/>
  </define>
  <!-- I.3. Missions, Phases -->
  <define name="define-alignment">
    <element name="define-alignment">
      <ref name="attlist.define-alignment"/>
      <optional>
        <ref name="label"/>
      </optional>
      <optional>
        <ref name="attributes"/>
      </optional>
      <zeroOrMore>
        <ref name="instruction"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.define-alignment" combine="interleave">
    <attribute name="name"/>
  </define>
  <!-- II. Event Tree Layer -->
  <!-- II.1. Initiating events, Initiating event Groups -->
  <define name="define-initiating-event">
    <element name="define-initiating-event">
      <ref name="attlist.define-initiating-event"/>
      <optional>
        <ref name="label"/>
      </optional>
      <optional>
        <ref name="attributes"/>
      </optional>
      <zeroOrMore>
        <choice>
          <ref name="collected-item"/>
          <ref name="consequence"/>
          <ref name="consequence-group"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.define-initiating-event" combine="interleave">
    <attribute name="name"/>
  </define>
  <define name="define-initiating-event-group">
    <element name="define-initiating-event-group">
      <ref name="attlist.define-initiating-event-group"/>
      <optional>
        <ref name="label"/>
      </optional>
      <optional>
        <ref name="attributes"/>
      </optional>
      <zeroOrMore>
        <choice>
          <ref name="initiating-event"/>
          <ref name="initiating-event-group"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.define-initiating-event-group" combine="interleave">
    <attribute name="name"/>
  </define>
  <define name="initiating-event">
    <element name="initiating-event">
      <ref name="attlist.initiating-event"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.initiating-event" combine="interleave">
    <attribute name="name"/>
    <optional>
      <attribute name="event-tree"/>
    </optional>
  </define>
  <define name="initiating-event-group">
    <element name="initiating-event-group">
      <ref name="attlist.initiating-event-group"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.initiating-event-group" combine="interleave">
    <attribute name="name"/>
    <optional>
      <attribute name="event-tree"/>
    </optional>
  </define>
  <!-- II.2. Event Trees -->
  <define name="define-event-tree">
    <element name="define-event-tree">
      <ref name="attlist.define-event-tree"/>
      <optional>
        <ref name="label"/>
      </optional>
      <optional>
        <ref name="attributes"/>
      </optional>
      <zeroOrMore>
        <ref name="define-functional-event"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="define-sequence"/>
      </zeroOrMore>
      <zeroOrMore>
        <ref name="define-branch"/>
      </zeroOrMore>
      <ref name="initial-state"/>
    </element>
  </define>
  <define name="attlist.define-event-tree" combine="interleave">
    <attribute name="name"/>
  </define>
  <define name="define-functional-event">
    <element name="define-functional-event">
      <ref name="attlist.define-functional-event"/>
      <optional>
        <ref name="label"/>
      </optional>
      <optional>
        <ref name="attributes"/>
      </optional>
    </element>
  </define>
  <define name="attlist.define-functional-event" combine="interleave">
    <attribute name="name"/>
  </define>
  <define name="define-sequence">
    <element name="define-sequence">
      <ref name="attlist.define-sequence"/>
      <optional>
        <ref name="label"/>
      </optional>
      <optional>
        <ref name="attributes"/>
      </optional>
      <zeroOrMore>
        <ref name="instruction"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.define-sequence" combine="interleave">
    <attribute name="name"/>
  </define>
  <define name="define-branch">
    <element name="define-branch">
      <ref name="attlist.define-branch"/>
      <optional>
        <ref name="label"/>
      </optional>
      <optional>
        <ref name="attributes"/>
      </optional>
      <ref name="branch"/>
    </element>
  </define>
  <define name="attlist.define-branch" combine="interleave">
    <attribute name="name"/>
  </define>
  <define name="fork">
    <element name="fork">
      <ref name="attlist.fork"/>
      <oneOrMore>
        <ref name="path"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.fork" combine="interleave">
    <attribute name="functional-event"/>
  </define>
  <define name="path">
    <element name="path">
      <ref name="attlist.path"/>
      <oneOrMore>
        <ref name="branch"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.path" combine="interleave">
    <attribute name="state"/>
  </define>
  <define name="initial-state">
    <element name="initial-state">
      <ref name="attlist.initial-state"/>
      <ref name="branch"/>
    </element>
  </define>
  <define name="attlist.initial-state" combine="interleave">
    <empty/>
  </define>
  <!-- II.3. Instructions, Rules -->
  <define name="set-gate">
    <element name="set-gate">
      <ref name="attlist.set-gate"/>
      <ref name="formula"/>
    </element>
  </define>
  <define name="attlist.set-gate" combine="interleave">
    <attribute name="name"/>
    <optional>
      <attribute name="direction">
        <choice>
          <value>directions</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <define name="set-house-event">
    <element name="set-house-event">
      <ref name="attlist.set-house-event"/>
      <ref name="Constant"/>
    </element>
  </define>
  <define name="attlist.set-house-event" combine="interleave">
    <attribute name="name"/>
    <optional>
      <attribute name="direction">
        <choice>
          <value>directions</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <define name="set-basic-event">
    <element name="set-basic-event">
      <ref name="attlist.set-basic-event"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.set-basic-event" combine="interleave">
    <attribute name="name"/>
    <optional>
      <attribute name="direction">
        <choice>
          <value>directions</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <define name="set-parameter">
    <element name="set-parameter">
      <ref name="attlist.set-parameter"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.set-parameter" combine="interleave">
    <attribute name="name"/>
    <optional>
      <attribute name="direction">
        <choice>
          <value>directions</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <define name="if">
    <element name="if">
      <ref name="attlist.if"/>
      <ref name="expression"/>
      <ref name="instruction"/>
      <optional>
        <ref name="instruction"/>
      </optional>
    </element>
  </define>
  <define name="attlist.if" combine="interleave">
    <empty/>
  </define>
  <define name="collect-formula">
    <element name="collect-formula">
      <ref name="attlist.collect-formula"/>
      <ref name="formula"/>
    </element>
  </define>
  <define name="attlist.collect-formula" combine="interleave">
    <empty/>
  </define>
  <define name="collect-expression">
    <element name="collect-expression">
      <ref name="attlist.collect-expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.collect-expression" combine="interleave">
    <empty/>
  </define>
  <define name="block">
    <element name="block">
      <ref name="attlist.block"/>
      <zeroOrMore>
        <ref name="instruction"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.block" combine="interleave">
    <empty/>
  </define>
  <define name="event-tree">
    <element name="event-tree">
      <ref name="attlist.event-tree"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.event-tree" combine="interleave">
    <empty/>
  </define>
  <define name="rule">
    <element name="rule">
      <ref name="attlist.rule"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.rule" combine="interleave">
    <attribute name="name"/>
  </define>
  <!-- III. Meta-Logical Layer -->
  <!-- III.1. CCF-Groups -->
  <define name="define-CCF-group">
    <element name="define-CCF-group">
      <ref name="attlist.define-CCF-group"/>
      <optional>
        <ref name="label"/>
      </optional>
      <optional>
        <ref name="attributes"/>
      </optional>
      <ref name="members"/>
      <ref name="distribution"/>
      <ref name="factors"/>
    </element>
  </define>
  <define name="attlist.define-CCF-group" combine="interleave">
    <attribute name="name"/>
    <attribute name="model">
      <choice>
        <value>beta-factor</value>
        <value>MGL</value>
        <value>alpha-factor</value>
        <value>phi-factor</value>
      </choice>
    </attribute>
  </define>
  <define name="members">
    <element name="members">
      <ref name="attlist.members"/>
      <oneOrMore>
        <ref name="basic-event"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.members" combine="interleave">
    <empty/>
  </define>
  <define name="factors">
    <element name="factors">
      <ref name="attlist.factors"/>
      <oneOrMore>
        <ref name="factor"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.factors" combine="interleave">
    <empty/>
  </define>
  <define name="factor">
    <element name="factor">
      <ref name="attlist.factor"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.factor" combine="interleave">
    <attribute name="level"/>
  </define>
  <!-- III.2. Substitutions -->
  <define name="distribution">
    <element name="distribution">
      <ref name="attlist.distribution"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.distribution" combine="interleave">
    <empty/>
  </define>
  <define name="define-substitution">
    <element name="define-substitution">
      <ref name="attlist.define-substitution"/>
      <optional>
        <ref name="label"/>
      </optional>
      <optional>
        <ref name="attributes"/>
      </optional>
      <ref name="hypothesis"/>
      <optional>
        <ref name="source"/>
      </optional>
      <ref name="target"/>
    </element>
  </define>
  <define name="attlist.define-substitution" combine="interleave">
    <optional>
      <attribute name="name"/>
    </optional>
    <optional>
      <attribute name="type"/>
    </optional>
  </define>
  <define name="hypothesis">
    <element name="hypothesis">
      <ref name="attlist.hypothesis"/>
      <ref name="Boolean-formula"/>
    </element>
  </define>
  <define name="attlist.hypothesis" combine="interleave">
    <empty/>
  </define>
  <define name="source">
    <element name="source">
      <ref name="attlist.source"/>
      <oneOrMore>
        <ref name="basic-event"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.source" combine="interleave">
    <empty/>
  </define>
  <define name="target">
    <element name="target">
      <ref name="attlist.target"/>
      <choice>
        <oneOrMore>
          <ref name="basic-event"/>
        </oneOrMore>
        <ref name="Boolean-formula"/>
      </choice>
    </element>
  </define>
  <define name="attlist.target" combine="interleave">
    <empty/>
  </define>
  <!-- IV. Fault Tree Layer -->
  <!-- IV.1. Definitions of Fault Trees & Components -->
  <define name="define-fault-tree">
    <element name="define-fault-tree">
      <ref name="attlist.define-fault-tree"/>
      <optional>
        <ref name="label"/>
      </optional>
      <optional>
        <ref name="attributes"/>
      </optional>
      <zeroOrMore>
        <choice>
          <ref name="define-substitution"/>
          <ref name="define-CCF-group"/>
          <ref name="define-component"/>
          <ref name="define-gate"/>
          <ref name="define-house-event"/>
          <ref name="define-basic-event"/>
          <ref name="define-parameter"/>
          <ref name="include"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.define-fault-tree" combine="interleave">
    <optional>
      <attribute name="name"/>
    </optional>
  </define>
  <define name="define-component">
    <element name="define-component">
      <ref name="attlist.define-component"/>
      <optional>
        <ref name="label"/>
      </optional>
      <optional>
        <ref name="attributes"/>
      </optional>
      <zeroOrMore>
        <choice>
          <ref name="define-substitution"/>
          <ref name="define-CCF-group"/>
          <ref name="define-component"/>
          <ref name="define-gate"/>
          <ref name="define-house-event"/>
          <ref name="define-basic-event"/>
          <ref name="define-parameter"/>
          <ref name="include"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.define-component" combine="interleave">
    <attribute name="name"/>
    <optional>
      <attribute name="role">
        <choice>
          <value>private</value>
          <value>public</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <define name="model-data">
    <element name="model-data">
      <ref name="attlist.model-data"/>
      <zeroOrMore>
        <choice>
          <ref name="define-house-event"/>
          <ref name="define-basic-event"/>
          <ref name="define-parameter"/>
          <ref name="include"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.model-data" combine="interleave">
    <empty/>
  </define>
  <!-- IV.2. Definitions of Gates, House Events & Basic Events -->
  <define name="define-gate">
    <element name="define-gate">
      <ref name="attlist.define-gate"/>
      <optional>
        <ref name="label"/>
      </optional>
      <optional>
        <ref name="attributes"/>
      </optional>
      <ref name="formula"/>
    </element>
  </define>
  <define name="attlist.define-gate" combine="interleave">
    <empty/>
  </define>
  <define name="define-house-event">
    <element name="define-house-event">
      <ref name="attlist.define-house-event"/>
      <optional>
        <ref name="label"/>
      </optional>
      <optional>
        <ref name="attributes"/>
      </optional>
      <optional>
        <ref name="Constant"/>
      </optional>
    </element>
  </define>
  <define name="attlist.define-house-event" combine="interleave">
    <attribute name="name"/>
    <optional>
      <attribute name="role">
        <choice>
          <value>private</value>
          <value>public</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <define name="define-basic-event">
    <element name="define-basic-event">
      <ref name="attlist.define-basic-event"/>
      <optional>
        <ref name="label"/>
      </optional>
      <optional>
        <ref name="attributes"/>
      </optional>
      <optional>
        <ref name="expression"/>
      </optional>
    </element>
  </define>
  <define name="attlist.define-basic-event" combine="interleave">
    <attribute name="name"/>
    <optional>
      <attribute name="role">
        <choice>
          <value>private</value>
          <value>public</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <!-- IV.3. Formulae -->
  <define name="formula">
    <element name="formula">
      <ref name="attlist.formula"/>
      <choice>
        <ref name="gate"/>
        <ref name="house-event"/>
        <ref name="basic-event"/>
        <ref name="Constant"/>
        <ref name="and"/>
        <ref name="or"/>
        <ref name="not"/>
        <ref name="xor"/>
        <ref name="iff"/>
        <ref name="nand"/>
        <ref name="nor"/>
        <ref name="atleast"/>
        <ref name="cardinality"/>
      </choice>
    </element>
  </define>
  <define name="attlist.formula" combine="interleave">
    <empty/>
  </define>
  <define name="gate">
    <element name="gate">
      <ref name="attlist.gate"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.gate" combine="interleave">
    <attribute name="name"/>
  </define>
  <define name="house-event">
    <element name="house-event">
      <ref name="attlist.house-event"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.house-event" combine="interleave">
    <attribute name="name"/>
  </define>
  <define name="basic-event">
    <element name="basic-event">
      <ref name="attlist.basic-event"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.basic-event" combine="interleave">
    <attribute name="name"/>
  </define>
  <define name="and">
    <element name="and">
      <ref name="attlist.and"/>
      <oneOrMore>
        <ref name="formula"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.and" combine="interleave">
    <empty/>
  </define>
  <define name="or">
    <element name="or">
      <ref name="attlist.or"/>
      <oneOrMore>
        <ref name="formula"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.or" combine="interleave">
    <empty/>
  </define>
  <define name="not">
    <element name="not">
      <ref name="attlist.not"/>
      <ref name="formula"/>
    </element>
  </define>
  <define name="attlist.not" combine="interleave">
    <empty/>
  </define>
  <define name="xor">
    <element name="xor">
      <ref name="attlist.xor"/>
      <oneOrMore>
        <ref name="formula"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.xor" combine="interleave">
    <empty/>
  </define>
  <define name="iff">
    <element name="iff">
      <ref name="attlist.iff"/>
      <oneOrMore>
        <ref name="formula"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.iff" combine="interleave">
    <empty/>
  </define>
  <define name="nand">
    <element name="nand">
      <ref name="attlist.nand"/>
      <oneOrMore>
        <ref name="formula"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.nand" combine="interleave">
    <empty/>
  </define>
  <define name="nor">
    <element name="nor">
      <ref name="attlist.nor"/>
      <oneOrMore>
        <ref name="formula"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.nor" combine="interleave">
    <empty/>
  </define>
  <define name="atleast">
    <element name="atleast">
      <ref name="attlist.atleast"/>
      <oneOrMore>
        <ref name="formula"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.atleast" combine="interleave">
    <attribute name="min"/>
  </define>
  <define name="cardinality">
    <element name="cardinality">
      <ref name="attlist.cardinality"/>
      <oneOrMore>
        <ref name="formula"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.cardinality" combine="interleave">
    <attribute name="min"/>
    <attribute name="max"/>
  </define>
  <define name="imply">
    <element name="imply">
      <ref name="attlist.imply"/>
      <ref name="formula"/>
      <ref name="formula"/>
    </element>
  </define>
  <define name="attlist.imply" combine="interleave">
    <empty/>
  </define>
  <define name="constant">
    <element name="constant">
      <ref name="attlist.constant"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.constant" combine="interleave">
    <attribute name="value">
      <choice>
        <value>true</value>
        <value>false</value>
      </choice>
    </attribute>
  </define>
  <!-- V. Stochastic Layer -->
  <!-- V.1. Definition of Parameters -->
  <define name="define-parameter">
    <element name="define-parameter">
      <ref name="attlist.define-parameter"/>
      <optional>
        <ref name="label"/>
      </optional>
      <optional>
        <ref name="attributes"/>
      </optional>
      <optional>
        <ref name="expression"/>
      </optional>
    </element>
  </define>
  <define name="attlist.define-parameter" combine="interleave">
    <attribute name="name"/>
    <optional>
      <attribute name="role">
        <choice>
          <value>private</value>
          <value>public</value>
        </choice>
      </attribute>
    </optional>
    <optional>
      <attribute name="unit">
        <choice>
          <value>units</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <!-- V.2. Expressions -->
  <!-- V.2.1. Entities -->
  <!-- V.2.2. Constants, Parameters -->
  <define name="bool">
    <element name="bool">
      <ref name="attlist.bool"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.bool" combine="interleave">
    <attribute name="value">
      <choice>
        <value>true</value>
        <value>false</value>
      </choice>
    </attribute>
  </define>
  <define name="int">
    <element name="int">
      <ref name="attlist.int"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.int" combine="interleave">
    <attribute name="value"/>
  </define>
  <define name="float">
    <element name="float">
      <ref name="attlist.float"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.float" combine="interleave">
    <attribute name="value"/>
  </define>
  <define name="system-mission-time">
    <element name="system-mission-time">
      <ref name="attlist.system-mission-time"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.system-mission-time" combine="interleave">
    <optional>
      <attribute name="unit">
        <choice>
          <value>units</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <define name="parameter">
    <element name="parameter">
      <ref name="attlist.parameter"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.parameter" combine="interleave">
    <attribute name="name"/>
  </define>
  <!-- V.2.3. Numerical Expressions -->
  <define name="neg">
    <element name="neg">
      <ref name="attlist.neg"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.neg" combine="interleave">
    <empty/>
  </define>
  <define name="add">
    <element name="add">
      <ref name="attlist.add"/>
      <oneOrMore>
        <ref name="expression"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.add" combine="interleave">
    <empty/>
  </define>
  <define name="sub">
    <element name="sub">
      <ref name="attlist.sub"/>
      <oneOrMore>
        <ref name="expression"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.sub" combine="interleave">
    <empty/>
  </define>
  <define name="mul">
    <element name="mul">
      <ref name="attlist.mul"/>
      <oneOrMore>
        <ref name="expression"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.mul" combine="interleave">
    <empty/>
  </define>
  <define name="div">
    <element name="div">
      <ref name="attlist.div"/>
      <oneOrMore>
        <ref name="expression"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.div" combine="interleave">
    <empty/>
  </define>
  <define name="pi">
    <element name="pi">
      <ref name="attlist.pi"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.pi" combine="interleave">
    <empty/>
  </define>
  <define name="abs">
    <element name="abs">
      <ref name="attlist.abs"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.abs" combine="interleave">
    <empty/>
  </define>
  <define name="acos">
    <element name="acos">
      <ref name="attlist.acos"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.acos" combine="interleave">
    <empty/>
  </define>
  <define name="asin">
    <element name="asin">
      <ref name="attlist.asin"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.asin" combine="interleave">
    <empty/>
  </define>
  <define name="atan">
    <element name="atan">
      <ref name="attlist.atan"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.atan" combine="interleave">
    <empty/>
  </define>
  <define name="cos">
    <element name="cos">
      <ref name="attlist.cos"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.cos" combine="interleave">
    <empty/>
  </define>
  <define name="cosh">
    <element name="cosh">
      <ref name="attlist.cosh"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.cosh" combine="interleave">
    <empty/>
  </define>
  <define name="exp">
    <element name="exp">
      <ref name="attlist.exp"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.exp" combine="interleave">
    <empty/>
  </define>
  <define name="log">
    <element name="log">
      <ref name="attlist.log"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.log" combine="interleave">
    <empty/>
  </define>
  <define name="log10">
    <element name="log10">
      <ref name="attlist.log10"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.log10" combine="interleave">
    <empty/>
  </define>
  <define name="mod">
    <element name="mod">
      <ref name="attlist.mod"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.mod" combine="interleave">
    <empty/>
  </define>
  <define name="pow">
    <element name="pow">
      <ref name="attlist.pow"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.pow" combine="interleave">
    <empty/>
  </define>
  <define name="sin">
    <element name="sin">
      <ref name="attlist.sin"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.sin" combine="interleave">
    <empty/>
  </define>
  <define name="sinh">
    <element name="sinh">
      <ref name="attlist.sinh"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.sinh" combine="interleave">
    <empty/>
  </define>
  <define name="tan">
    <element name="tan">
      <ref name="attlist.tan"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.tan" combine="interleave">
    <empty/>
  </define>
  <define name="tanh">
    <element name="tanh">
      <ref name="attlist.tanh"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.tanh" combine="interleave">
    <empty/>
  </define>
  <define name="sqrt">
    <element name="sqrt">
      <ref name="attlist.sqrt"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.sqrt" combine="interleave">
    <empty/>
  </define>
  <define name="ceil">
    <element name="ceil">
      <ref name="attlist.ceil"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.ceil" combine="interleave">
    <empty/>
  </define>
  <define name="floor">
    <element name="floor">
      <ref name="attlist.floor"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.floor" combine="interleave">
    <empty/>
  </define>
  <define name="min">
    <element name="min">
      <ref name="attlist.min"/>
      <oneOrMore>
        <ref name="expression"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.min" combine="interleave">
    <empty/>
  </define>
  <define name="max">
    <element name="max">
      <ref name="attlist.max"/>
      <oneOrMore>
        <ref name="expression"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.max" combine="interleave">
    <empty/>
  </define>
  <define name="mean">
    <element name="mean">
      <ref name="attlist.mean"/>
      <oneOrMore>
        <ref name="expression"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.mean" combine="interleave">
    <empty/>
  </define>
  <!-- V.2.4. Boolean Expressions -->
  <define name="bool_not">
    <element name="bool_not">
      <ref name="attlist.bool_not"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.bool_not" combine="interleave">
    <empty/>
  </define>
  <define name="bool_and">
    <element name="bool_and">
      <ref name="attlist.bool_and"/>
      <oneOrMore>
        <ref name="expression"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.bool_and" combine="interleave">
    <empty/>
  </define>
  <define name="bool_or">
    <element name="bool_or">
      <ref name="attlist.bool_or"/>
      <oneOrMore>
        <ref name="expression"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.bool_or" combine="interleave">
    <empty/>
  </define>
  <define name="eq">
    <element name="eq">
      <ref name="attlist.eq"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.eq" combine="interleave">
    <empty/>
  </define>
  <define name="df">
    <element name="df">
      <ref name="attlist.df"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.df" combine="interleave">
    <empty/>
  </define>
  <define name="lt">
    <element name="lt">
      <ref name="attlist.lt"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.lt" combine="interleave">
    <empty/>
  </define>
  <define name="gt">
    <element name="gt">
      <ref name="attlist.gt"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.gt" combine="interleave">
    <empty/>
  </define>
  <define name="leq">
    <element name="leq">
      <ref name="attlist.leq"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.leq" combine="interleave">
    <empty/>
  </define>
  <define name="geq">
    <element name="geq">
      <ref name="attlist.geq"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.geq" combine="interleave">
    <empty/>
  </define>
  <!-- V.2.5. Conditional Expressions -->
  <define name="ite">
    <element name="ite">
      <ref name="attlist.ite"/>
      <ref name="expression"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.ite" combine="interleave">
    <empty/>
  </define>
  <define name="switch">
    <element name="switch">
      <ref name="attlist.switch"/>
      <zeroOrMore>
        <ref name="case"/>
      </zeroOrMore>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.switch" combine="interleave">
    <empty/>
  </define>
  <define name="case">
    <element name="case">
      <ref name="attlist.case"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.case" combine="interleave">
    <empty/>
  </define>
  <!-- V.2.6. Built-ins -->
  <define name="exponential">
    <element name="exponential">
      <ref name="attlist.exponential"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.exponential" combine="interleave">
    <empty/>
  </define>
  <define name="GLM">
    <element name="GLM">
      <ref name="attlist.GLM"/>
      <ref name="expression"/>
      <ref name="expression"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.GLM" combine="interleave">
    <empty/>
  </define>
  <define name="Weibull">
    <element name="Weibull">
      <ref name="attlist.Weibull"/>
      <ref name="expression"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.Weibull" combine="interleave">
    <empty/>
  </define>
  <define name="periodic-test">
    <element name="periodic-test">
      <ref name="attlist.periodic-test"/>
      <oneOrMore>
        <ref name="expression"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.periodic-test" combine="interleave">
    <empty/>
  </define>
  <define name="extern-function">
    <element name="extern-function">
      <ref name="attlist.extern-function"/>
      <zeroOrMore>
        <ref name="expression"/>
      </zeroOrMore>
    </element>
  </define>
  <define name="attlist.extern-function" combine="interleave">
    <attribute name="name"/>
  </define>
  <!-- V.2.7. Random-Deviates -->
  <define name="uniform-deviate">
    <element name="uniform-deviate">
      <ref name="attlist.uniform-deviate"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.uniform-deviate" combine="interleave">
    <empty/>
  </define>
  <define name="normal-deviate">
    <element name="normal-deviate">
      <ref name="attlist.normal-deviate"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.normal-deviate" combine="interleave">
    <empty/>
  </define>
  <define name="lognormal-deviate">
    <element name="lognormal-deviate">
      <ref name="attlist.lognormal-deviate"/>
      <ref name="expression"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.lognormal-deviate" combine="interleave">
    <empty/>
  </define>
  <define name="gamma-deviate">
    <element name="gamma-deviate">
      <ref name="attlist.gamma-deviate"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.gamma-deviate" combine="interleave">
    <empty/>
  </define>
  <define name="beta-deviate">
    <element name="beta-deviate">
      <ref name="attlist.beta-deviate"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.beta-deviate" combine="interleave">
    <empty/>
  </define>
  <define name="histogram">
    <element name="histogram">
      <ref name="attlist.histogram"/>
      <ref name="expression"/>
      <oneOrMore>
        <ref name="bin"/>
      </oneOrMore>
    </element>
  </define>
  <define name="attlist.histogram" combine="interleave">
    <empty/>
  </define>
  <define name="bin">
    <element name="bin">
      <ref name="attlist.bin"/>
      <ref name="expression"/>
      <ref name="expression"/>
    </element>
  </define>
  <define name="attlist.bin" combine="interleave">
    <empty/>
  </define>
  <!-- V.2.8. Test-Events -->
  <define name="test-initiating-event">
    <element name="test-initiating-event">
      <ref name="attlist.test-initiating-event"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.test-initiating-event" combine="interleave">
    <attribute name="name"/>
  </define>
  <define name="test-functional-event">
    <element name="test-functional-event">
      <ref name="attlist.test-functional-event"/>
      <empty/>
    </element>
  </define>
  <define name="attlist.test-functional-event" combine="interleave">
    <attribute name="name"/>
    <attribute name="state"/>
  </define>
  <define name="Boolean-formula" combine="choice">
    <notAllowed/>
  </define>
  <define name="Constant" combine="choice">
    <notAllowed/>
  </define>
  <define name="branch" combine="choice">
    <notAllowed/>
  </define>
  <define name="collected-item" combine="choice">
    <notAllowed/>
  </define>
  <define name="define-rule" combine="choice">
    <notAllowed/>
  </define>
  <define name="expression" combine="choice">
    <notAllowed/>
  </define>
  <define name="instruction" combine="choice">
    <notAllowed/>
  </define>
  <define name="sequence" combine="choice">
    <notAllowed/>
  </define>
  <start>
    <choice>
      <ref name="pow"/>
      <ref name="imply"/>
      <ref name="float"/>
      <ref name="abs"/>
      <ref name="uniform-deviate"/>
      <ref name="fork"/>
      <ref name="mod"/>
      <ref name="beta-deviate"/>
      <ref name="log"/>
      <ref name="normal-deviate"/>
      <ref name="floor"/>
      <ref name="histogram"/>
      <ref name="ite"/>
      <ref name="gt"/>
      <ref name="pi"/>
      <ref name="tan"/>
      <ref name="neg"/>
      <ref name="ceil"/>
      <ref name="block"/>
      <ref name="switch"/>
      <ref name="lt"/>
      <ref name="periodic-test"/>
      <ref name="df"/>
      <ref name="event-tree"/>
      <ref name="test-functional-event"/>
      <ref name="min"/>
      <ref name="max"/>
      <ref name="leq"/>
      <ref name="sqrt"/>
      <ref name="GLM"/>
      <ref name="sin"/>
      <ref name="set-house-event"/>
      <ref name="eq"/>
      <ref name="opsa-mef"/>
      <ref name="atan"/>
      <ref name="cos"/>
      <ref name="system-mission-time"/>
      <ref name="Weibull"/>
      <ref name="collect-expression"/>
      <ref name="tanh"/>
      <ref name="bool_not"/>
      <ref name="geq"/>
      <ref name="cosh"/>
      <ref name="int"/>
      <ref name="exponential"/>
      <ref name="bool_or"/>
      <ref name="sinh"/>
      <ref name="exp"/>
      <ref name="set-basic-event"/>
      <ref name="sub"/>
      <ref name="asin"/>
      <ref name="bool_and"/>
      <ref name="div"/>
      <ref name="add"/>
      <ref name="collect-formula"/>
      <ref name="model-data"/>
      <ref name="parameter"/>
      <ref name="set-parameter"/>
      <ref name="if"/>
      <ref name="rule"/>
      <ref name="mean"/>
      <ref name="acos"/>
      <ref name="constant"/>
      <ref name="set-gate"/>
      <ref name="test-initiating-event"/>
      <ref name="mul"/>
      <ref name="log10"/>
      <ref name="gamma-deviate"/>
      <ref name="extern-function"/>
      <ref name="bool"/>
      <ref name="lognormal-deviate"/>
    </choice>
  </start>
</grammar>
