A description of python script to generate a tree of any size and complexity:

* Use random numbers to determine the structure of the tree. [done]
* Number of primary events is specified by a user. [done]
* The seed of the random number generator may be fixed and specified as
    well.[done]
* Names of events in the tree must be randomly chosen between creating a
    new event or re-using already created event. [done]
* Probabilities for primary events are generated randomly. [done]
* Names are assigned sequentially. E# and P#. [done]
* The tree is deterministic upon setting the same parameters. [done]

* The exact ratios are not guaranteed.
* No support for transfer ins or outs is expected.
* No support for CCF is expected.

Script arguments:
    * Random number generator seed. [done]
    * Number of primary events. [done]
    * Approximate Ratio primary events to intermediate events. Average. [done]
    * Approximate ratio of reused primary events. This events may show up
        in several places in the tree. [done]
    * Minimum and maximum probabilities for primary events. [done]
    * Number of primary events for the root node of the tree. [done]
    * Output file name. [done]

* The output should be an input tree file and a probability file. [done]

Algorithm: [done]
1) Generate databases with intermediate and basic events.
    * Top event may not have a children primary event for complexity of the
        tree. The number of primary events for the root node may be set
        by a user.
    * Random choice between creating a new intermediate event,
        a new primary event, or existing primary event.
    * Limiting factors: average number of primary events per intermediate
        event, total number of basic events.
2) Write these databases into output tree file.
3) Generate probabilities.
4) Write probabilities into probability file.
